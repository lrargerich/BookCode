package $packageName;

import java.util.Iterator;

#set ($coefficientType = $templateTypes.get(0))
#set ($objectType = $genericTypes.get(0))

#set ($sumClassName = $utility.getAnnotatedClassName("SparseFormalSum", $templateTypes, $genericTypes))
#set ($fieldClassName = $utility.getAnnotatedClassName("AbstractField", [$coefficientType], []))
#set ($className = $utility.getAnnotatedClassName("PersistenceAlgorithm", $templateTypes, $genericTypes))
#set ($basicClassName = $utility.getClassName("PersistenceAlgorithm", $templateTypes, $genericTypes))

#if ($coefficientType == "boolean")
#set ($moduleClassName = $utility.getAnnotatedClassName("PrimitiveFreeModule", $templateTypes, $genericTypes))
#else
#set ($moduleClassName = $utility.getAnnotatedClassName("AlgebraicFreeModule", $templateTypes, $genericTypes))
#end

#set ($mapType = $utility.getMapType($objectType, $coefficientType) + $utility.getGenericAnnotation([$objectType, $coefficientType]))
#set ($iteratorType = $utility.getMapIteratorType($objectType, $coefficientType) + $utility.getGenericAnnotation([$objectType, $coefficientType]))

/**
 * This class defines the functionality for a persistence algorithm with underlying
 * field type being $coefficientType and underlying basis element type being $objectType.
 * It acts as an intermediate layer between the interface AbstractPersistenceBasisAlgorithm
 * and the actual implementations of the persistent homology/cohomology algorithms.
 * 
 * <p>$coefficientType the underlying type of the coefficient field</p>
 * <p>$objectType the underlying basis type</p>
 * 
 * @author autogen
 *
 */
@Generated(value = { "edu.stanford.math.plex4.generation.GeneratorDriver" })
public abstract class $className extends AbstractPersistenceBasisAlgorithm<$objectType, $sumClassName> {
	#if (!($coefficientType == "boolean"))
	/**
	 * This is the field over which we perform the arithmetic computations.
	 */
	protected final $fieldClassName field;
	#end
	
	/**
	 * This objects performs the chain computations.
	 */
	protected final $moduleClassName chainModule;
	
	/**
	 * This comparator defines the ordering on the basis elements.
	 */
	protected final Comparator<$objectType> basisComparator;
	
	/**
	 * This comparator provides the dictionary ordering on filtration value - basis element
	 * pairs.
	 */
	protected Comparator<$objectType> filteredComparator = null;

	/**
	 * This stores the minimum dimension for which to compute (co)homology.
	 */
	protected int minDimension = 0;
	
	/**
	 * This stores the maximum dimension for which to compute (co)homology.
	 */
	protected int maxDimension = 2;	

	#if ($coefficientType == "boolean")
	/**
	 * This constructor initializes the object with a comparator on the basis type.
	 * 
	 * @param basisComparator a comparator on the basis type $objectType
	 * @param minDimension the minimum dimension to compute 
	 * @param maxDimension the maximum dimension to compute
	 */
	public $basicClassName(Comparator<$objectType> basisComparator, int minDimension, int maxDimension) {
		this.chainModule = new $moduleClassName();
		this.basisComparator = basisComparator;
		this.minDimension = minDimension;
		this.maxDimension = maxDimension;
	}
	#else
	/**
	 * This constructor initializes the object with a field and a comparator on the basis type.
	 * 
	 * @param field a field structure on the type $coefficientType
	 * @param basisComparator a comparator on the basis type $objectType
	 * @param minDimension the minimum dimension to compute 
	 * @param maxDimension the maximum dimension to compute
	 */
	public $basicClassName($fieldClassName field, Comparator<$objectType> basisComparator, int minDimension, int maxDimension) {
		this.field = field;
		this.chainModule = new $moduleClassName(this.field);
		this.basisComparator = basisComparator;
		this.minDimension = minDimension;
		this.maxDimension = maxDimension;
	}
	#end

	/**
	 * This function simply updates the filtered comparator to the one induced by the given filtered stream.
	 * 
	 * @param stream the AbstractFilteredStream that provides the filtration index information
	 */
	protected void initializeFilteredComparator(AbstractFilteredStream<$objectType> stream) {
		this.filteredComparator = new FilteredComparator<$objectType>(stream, this.basisComparator);
	}

	/**
	 * This function returns the free module used for the arithmetic computations.
	 * 
	 * @return the free module over chains in $objectType
	 */
	public $moduleClassName getChainModule() {
		return this.chainModule;
	}
	
	#if (!($coefficientType == "boolean"))
	/**
	 * This function returns the field over which the homology is computed.
	 * 
	 * @return the field over type $coefficientType
	 */
	public $fieldClassName getField() {
		return this.field;
	}
	#end
	
	public BarcodeCollection<Integer> computeIndexIntervals(AbstractFilteredStream<$objectType> stream) {
		this.initializeFilteredComparator(stream);
		return this.computeIntervalsImpl(stream);
	}

	public AnnotatedBarcodeCollection<Integer, $sumClassName> computeAnnotatedIndexIntervals(AbstractFilteredStream<$objectType> stream) {
		this.initializeFilteredComparator(stream);
		return this.computeAnnotatedIntervalsImpl(stream);
	}
	
	/**
	 * This function provides the implementation of computeIntervals.
	 * 
	 * @param stream the filtered chain complex 
	 * @return the persistence intervals of the given complex
	 */
	protected abstract BarcodeCollection<Integer> computeIntervalsImpl(AbstractFilteredStream<$objectType> stream);
	
	/**
	 * This function provides the implementation of computeAnnotatedIntervals.
	 * 
	 * @param stream the filtered chain complex
	 * @return the augmented persistence intervals
	 */
	protected abstract AnnotatedBarcodeCollection<Integer, $sumClassName> computeAnnotatedIntervalsImpl(AbstractFilteredStream<$objectType> stream);
	
	/**
	 * This function computes the operation low_A(j) as described in the paper. Note that if
	 * the chain is empty (for example the column contains only zeros), then this function
	 * returns null.
	 * 
	 * @param chain the chain to search
	 * @return  the lowest element of the chain
	 */
	protected $objectType low($sumClassName chain) {
	
		$objectType maxObject = null;
		
		#if ($coefficientType == "boolean")
		$objectType current = null;
		for (Iterator<$objectType> iterator = chain.iterator(); iterator.hasNext(); ) {
			current = iterator.next();
			if (maxObject == null || this.filteredComparator.compare(current, maxObject) > 0) {
				maxObject = current;
			}
		}
		
		#else
		
		#if ($utility.isPrimitive($coefficientType))
		
		for ($iteratorType iterator = chain.iterator(); iterator.hasNext(); ) {
			iterator.advance();
			if (maxObject == null || this.filteredComparator.compare(iterator.key(), maxObject) > 0) {
				maxObject = iterator.key();
			}
		}
		
		#else
		
		for (Iterator<Map.Entry<$objectType, $coefficientType>> iterator = chain.iterator(); iterator.hasNext(); ) {
			Map.Entry<$objectType, $coefficientType> entry = iterator.next();
			if (maxObject == null || this.filteredComparator.compare(entry.getKey(), maxObject) > 0) {
				maxObject = entry.getKey();
			}
		}
		
		#end

		#end

		return maxObject;
	}
}
